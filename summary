Student: Yuchen She
Sno: G20220797070070
    
    不知不觉已经完成了云原生训练，跟在老师后面学习确实可以在摸索的道路上少走很多的弯路。
感觉这五月接受到了很多的知识，但是要想完全吸收，五个月是远远不够的，甚至要在相关方向钻研超过五年。

    因为k8s底层是由Go实现的，所以在课程的开始，教程就先带领学习了Go语言基础，便于后期读源码。
在此基础上，用Go语言编写了一个简单的web服务。也算是入门Go语言。由于本人从事的是运维岗，所以在代码
编写的方面能力较为欠缺。也希望以后自己可以花更多的时间在代码编写上，提高自己的代码编写和阅读能力。
    紧接着学习了Docker，Docker作为一个老牌容器技术，已经被广为使用，这个技术的成熟度很好，而我平时在
工作上也使用过不少，但在学习了视频课后，才发现自己对Docker的理解还远远不够，视频从底层实现上讲解了Docker
的工作原理。然我受益匪浅。讲Docker也是为之后讲K8s埋好伏笔，毕竟容器技术还是有很多相通之处的。
    Docker后正式进入k8s的章节，k8s由四个组件组成，分别是etcd，api server， scheduler，controller。
课程上为每个组件都安排了整整一个星期的课程，讲解非常详细，也十分好理解，并且会穿插一些课堂示例。
再学习完这四个模块后，自己也算是对k8s有了初步的了解。视频中看老师讲解以及示范十分轻松简单，但是在自己做
课后作业和
小练习时才发觉问题重重，这部分内容没有足够的积累，是很难完成一项作业的。
    学习k8s的最终目的不是说掌握各个组件就行。如何把自己的服务部署在k8s集群上才是最终的目的。第八模块讲解了
如何在k8s中部署自己的服务，并且把它暴露出来，让外面可以访问。所以在这一章节学习了几个k8s关于服务发现的一些
resource，以及其工作原理。如何保证服务的可靠性，毕竟服务有可能宕机，程序可能会出错，接下来就学习了如何
实现一个高可用集群，作为运维这些都是必须要了解的知识，在服务出现问题的时候，需要能够快速定位到问题，
找到解决的方法。
    第十模块主要讲解cicd，和日志收集，现在的互联网产品更新迭代是很快的，如果还是按照传统的方式更新服务，效率
是极其低下的。cicd正好满足了这一要求。如果你有完善的流水线，一个迭代几个版本再也不是梦想。
    后面几个模块应该算是k8s的衍生内容。因为随着业务的需要不断增加，k8s自带的一些工具已经不能很好的满足更高的要求。
Istio应运而生，有了Istio在流量管理方面的自由度更加高。
    虽然训练营已经结束，但是我相信属于我的云原生才刚刚开始。道阻且长，为一位成为云原生专家拼搏！！

